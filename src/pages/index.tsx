import Button from "@/components/Button";
import ModalCreateInventory from "@/components/ModalCreateInventory";
import ModalDeleteInventory from "@/components/ModalDeleteInventory";
import { ModalTemplateHandles } from "@/components/ModalTemplate";
import Navigation from "@/components/Navigation";
import Table from "@/components/Table";
import TitlePage from "@/components/TitlePage";
import { InvertoryInterface, getAllInventorys } from "@/services/Inventory";
import PageContainer from "@/templates/PageContainer";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import styled from "styled-components";
import EditImg from "/public/assets/icons/edit.svg";
import TrashImg from "/public/assets/icons/trash.svg";

export default function Home() {
  const [inventorys, setInventorys] = useState<InvertoryInterface[]>([]);
  const [editInventory, setEditInventory] = useState<
    InvertoryInterface | undefined
  >(undefined);
  const [idDeleteInvetory, setIdDeleteInventoy] = useState(-1);

  const modalCreateRef = useRef<ModalTemplateHandles>(null);
  const modalDeleteRef = useRef<ModalTemplateHandles>(null);

  useEffect(() => {
    getAllInventorys().then((res) => setInventorys(res.data));
  }, []);

  function addInventory(data: InvertoryInterface) {
    const index = inventorys.findIndex((item) => item.id == data.id);
    console.log(index);
    if (index != -1) {
      console.log("oi");
      let new_array = [...inventorys];
      new_array[index] = data;
      setInventorys(new_array);
    } else {
      console.log("nada");
      setInventorys([data, ...inventorys]);
    }
  }

  function openEditModal(item: InvertoryInterface) {
    setEditInventory(item);
    modalCreateRef.current?.openModal();
  }

  function openDeleteModal(item: InvertoryInterface) {
    setIdDeleteInventoy(item.id);
    modalDeleteRef.current?.openModal();
  }

  function deleteModal(){
    const new_array = inventorys.filter((item)=> item.id != idDeleteInvetory)
    setInventorys(new_array)
  }

  return (
    <>
      <Head>
        <title>Estoque - MeuEstoque</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageContainer>
        <ModalDeleteInventory
          ref={modalDeleteRef}
          idDelete={idDeleteInvetory}
          onDelete={deleteModal}
        />
        <ModalCreateInventory
          ref={modalCreateRef}
          setInventory={addInventory}
          editInventoryData={editInventory}
        />
        <Row>
          <TitlePage>Estoque</TitlePage>
          <Button
            onClick={() => {
              setEditInventory(undefined);
              modalCreateRef.current?.openModal();
            }}
          >
            Novo produto
          </Button>
        </Row>

        <Table header={["ID", "Nome", "Quantidade", "PreÃ§o", ""]}>
          {inventorys.map((item) => (
            <tr className="c-table__row" key={item.id}>
              <td className="c-table__row__data">{item.id}</td>
              <td className="c-table__row__data">{item.name}</td>
              <td className="c-table__row__data">{item.quantity}</td>
              <td className="c-table__row__data">{item.price}</td>
              <td className="c-table__row__data" style={{ width: " 5%" }}>
                <RowButtons>
                  <Button onClick={() => openEditModal(item)}>
                    <Image src={EditImg} alt="Editar" width={20} height={20} />
                  </Button>
                  <Button color="red" onClick={()=>openDeleteModal(item)}>
                    <Image
                      src={TrashImg}
                      alt="Excluir"
                      width={20}
                      height={20}
                    />
                  </Button>
                </RowButtons>
              </td>
            </tr>
          ))}
        </Table>
      </PageContainer>
    </>
  );
}

const Row = styled.div`
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 32px;
`;

const RowButtons = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;
